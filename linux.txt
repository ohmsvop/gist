# print working directory
pwd

# listing
ls
ls -l # long
ls -R # deeply
ls -a # all files
ls -t # sort by time
ls -r # reverse
ls -F #	a / after the name of every directory and 
	a * after the name of every runnable program
	a @ after the name of every link

# permission
type user group other

- regular file
d directory
l symbolic link

r read
w write
x execute

u user
g group
o other
a all

chmod	change mode command
+-=
eg: u+x, a=rx
octal --- 0, --x 1, -w- 2, -wx 3, r-- 4, r-x 5, rw- 6, rwx 7

chgrp	change group
default: dir 777, file 666 - umask 0022 = dir 755, file 644

# change directory
cd
. the current directory
.. the parent directory
~ home directory
- previous directory

# find
find [path] [expression]
locate (fast but not in realtime)

# copy
cp

# move (also rename)
mv

# file collections
tar
c create a tar archive
x extract files from the archive
t display the table of contents
v verbose
z compression
f file use this file

# disk usage
du -h

# make directory
mkdir

# concatenate
cat
more, less
head # first 10 lines of a file 
q # quit
:n # next
:p # previous

# manual
man

# select column
cut

# rerun
history
!head
!3

# search
grep
-c: print a count of matching lines rather than the lines themselves
-h: do not print the names of files when searching multiple files
-i: ignore case (e.g., treat "Regression" and "regression" as matches)
-l: print the names of files that contain matches, not the matches
-n: print line numbers for matching lines
-v: invert the match, i.e., only show lines that don't match

# redirect output 
>  overwrite
>> append
< 

# I/O types
Standard Input stdin 0
Standard Output stdout 1
Standard Error stderr 2
2>&1 both stdout and stderr
/dev/null null device

# pipe
|

# word count
wc

# wildcards
*
?

# sort
sort

# unique
uniq # only applies to adjacent lines

# stop
^C

# find a variable's value
echo

# environment variables
$USER
$PATH

# shell variable
training=seasonal/summer.csv

# for loop
for filename in seasonal/*.csv; do echo $filename; done

# run shell script
bash

# all of the command-line parameters given to the script
$@

# single argument
$1, $2

# compare
diff 
sdiff
vimdiff
< line from file1
> line from file2

